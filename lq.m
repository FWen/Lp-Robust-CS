function [x,X,XX] = lq(y,A,Eps,Q,InitialGuess,OptArg)
%LQ Recovery of sparse vectors from incomplete measurements via an lq-method

%[x,X,XX]=lq(y,A) attempts to find the sparsest solution of the linear system
%Ax=y by iteratively solving
%z_{n+1}=argmin (sum |z_i|/(|z_{n,i}|+eps_i)^(1-q)
%subject to Az=y

%X: the column X(:,j) is the output of the iterative scheme for q=q_j;
%x is the sparsest vector among the columns of X;
%XX is a three-dimensional array; 
%X(:,j,n) holds the vector z_n generated by the iterative scheme with q=q_j;  

%Eps is a row vector containing eps_0,...,eps_{n-1};
%the number of iterations NbIter is determined as the length of Eps;  
%default=1./(2:11);

%Q is generally a column vector containing the values q_1,...q_{NbQ} being used for q;
%Q is also allowed to be a NbQ X NbIter matrix if the q_j were to vary
%during the iteration;
%default=Q=[0; 0.05; 0.1; 0.2];

%InitialGuess determines the choice of initial vector z_0;
%if InitialGuess=1, we use the l1eq_pd program to obtain z_0;
%if InitialGuess=2, we use the OGA program to obtain z_0;
%default=1;

%OptArg is an optional argument passed in l1eq_pd or OGA;
%in l1eq_pd, it represents the tolerance of the primal-dual algorithm;
%default=1e-3;
%in OGA, it represents the number of iterations;
%default=size(A,1)/2;

%Written by Simon Foucart, July 2008
%Based on the paper by Simon Foucart and Ming-Jun Lai:
%`Sparsest solutions of underdetermined linear systems via $\ell_q$-minimization for $0 < q \le 1$'
%e-mails: simon.foucart[at]centraliens.net

if nargin<2
   disp('lq requires at least 2 arguments') 
end

[m,N]=size(A);

if nargin<3
   Eps= 1./(2:11);
end
NbIter=size(Eps,2);

if nargin<4
   Q=[0; 0.05; 0.1; 0.2]; 
end
%transform Q into a NbQ X NbIter matrix
if size(Q,2)==1
Qaux=Q;
for n=1:NbIter-1
   Q=[Q,Qaux]; 
end
end
NbQ=size(Q,1);

if nargin<5
   InitialGuess=1; 
end

if nargin<6
   if InitialGuess==1
      OptArg=1e-3; 
   end
   if InitialGuess==2
      OptArg=m/2; 
   end
end


%body of the algorithm
    
%choice of the initial vector z0
if InitialGuess==1
   z00=A(:,1:m)\y; z00(m+1:N)=zeros(N-m,1);
   z0=l1eq_pd(z00,A,[],y,OptArg); 
end
if InitialGuess==2
   z0=OGA(y,A,OptArg); 
end

%iterations
Sparsity=N;
for j=1:NbQ
   z=z0;
   for n=1:NbIter
      eps=Eps(n);
      q=Q(j,n);
      d=(abs(z)+eps).^(1-q);
      D=diag(d);
      InvD=diag(1./d);
      An=A*D;
      zz=InvD*z;
      zz=l1eq_pd(zz,An,[],y,OptArg);
      z=D*zz;
      XX(:,j,n)=z;
   end
   X(:,j)=z;
   s=size(find(abs(z)>1e-3),1);
   if s<Sparsity 
       Sparsity=s;
       x=z;
   end
end

end